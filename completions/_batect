#compdef batect

typeset -a batect_completion_proxy_loaded_versions

_batect() {
    local wrapper_script_path
    wrapper_script_path="${words[1]}"

    if test ! -x "$wrapper_script_path"; then
        # If the wrapper script doesn't exist, fallback to as if this completion script doesn't exist.
        _files
        return
    fi

    local batect_version
    batect_version=$(sed -rn 's/VERSION="(.*)"/\1/p' "$wrapper_script_path")

    if [[ "$batect_version" != "" ]]; then
        local batect_version_major batect_version_minor
        batect_version_major=$(echo "$batect_version" | sed -rn 's/(\d+)\.(\d+)\..*/\1/p')
        batect_version_minor=$(echo "$batect_version" | sed -rn 's/(\d+)\.(\d+)\..*/\2/p')

        if [[ "$batect_version_major" -eq 0 && "$batect_version_minor" -lt 66 ]]; then
            # If we know what the version is, and it's too old, fallback to as if this completion script doesn't exist.
            _files
            return
        fi
    else
        # HACK: this makes it easier to test completions locally when testing with the start script generated by Gradle.
        batect_version="0.0.0-local-dev"
    fi

    export BATECT_COMPLETION_PROXY_REGISTER_AS="_batect-$batect_version"
    export BATECT_COMPLETION_PROXY_VERSION="0.2.0-dev"
    export BATECT_COMPLETION_PROXY_WRAPPER_PATH="$wrapper_script_path"

    # This syntax is explained at https://unix.stackexchange.com/a/411307/258093.
    if [[ ${batect_completion_proxy_loaded_versions[(ie)$batect_version]} -gt ${#batect_completion_proxy_loaded_versions} ]]; then
        local completion_script
        completion_script=$(BATECT_QUIET_DOWNLOAD=true $wrapper_script_path --generate-completion-script=zsh) || (
            _message "Running Batect $batect_version to generate completion script failed: $completion_script" && return 1
        )

        eval "$completion_script"
        batect_completion_proxy_loaded_versions+=("$wrapper_script_path")
    fi

    local ret=1
    _call_function ret "$BATECT_COMPLETION_PROXY_REGISTER_AS" && return ret

    _message "Batect tab completion script for version $batect_version did not register expected function $BATECT_COMPLETION_PROXY_REGISTER_AS"
    return 1
}

_batect "$@"
